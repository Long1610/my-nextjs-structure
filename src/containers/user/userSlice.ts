import { createSlice } from "@reduxjs/toolkit";
import { RootState } from "app/store";
import { signUp, signIn } from "./userThunk";
import { user } from "types/user.interface";

export interface UserState {
  user: user;
  status: "success" | "loading" | "failed";
}

const initialState: UserState = {
  user: {
    email: "",
    username: "",
    image: "",
    token: "",
  },
  status: "loading",
};

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(signUp.pending, (state) => {
        state.status = "loading";
      })
      .addCase(signUp.fulfilled, (state, action) => {
        state.status = "success";
        state.user = action.payload;
      })
      .addCase(signUp.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(signIn.pending, (state) => {
        state.status = "loading";
      })
      .addCase(signIn.fulfilled, (state, action) => {
        state.status = "success";
        state.user = action.payload;
      })
      .addCase(signIn.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const userInfo = (state: RootState) => state.user.user;
export const status = (state: RootState) => state.user.status;

export default userSlice.reducer;
